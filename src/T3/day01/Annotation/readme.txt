注解

作用分类：
    1，编写文档：通过代码里标识的注解生成文档【生成文档doc文档】
    2，代码分析：通过代码里标识的注解对代码进行分析【使用反射】
    3，编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】


JDK中预定义的一些注解：
    1，@Override：用于标识方法，标识该方法属于重写父类的方法
    2，@Deprecated：用于标识方法或类，标识该类或方法已过时，建议不要使用
    3，@SuppressWarnnings:用于有选择的关闭编译器对类、方法、成员变量、变量初始化的警告


自定义注解
格式：
    元注解
    public @interface 注解名称{}


注解的本质：注解的本质就是一个接口，该接口默认继承Annotation接口
public interface MyAnno1 extends java.lang.annotation.Annotation {}

属性：接口中可以定义的一些成员方法（注解属性,抽象方法）
    要求：
        1，属性的返回值类型：基本数据类型，String，枚举，注解，以上类型的数组。其他的都不行
        2，定义了属性，在使用时，需要给属性赋值。如果定义属性时使用default关键字给属性默认初始化，则使用注解
        时，可以不给初始值。如果只有一个属性需要赋值，可以直接定义值（简化操作）。数组赋值时，要使用{}包裹，如
        果数组中只有一个值，则{}可以省略


元注解：用于描述注解的注解
    1，@Target：描述注解能够作用的位置
        1,TYPE表示该注解只能作用于类上面
        2,Method表示该注解可以作用于方法上
        3,FIELD表示该注解可以作用于成员方法上
    2，@Retention：描述注解被保留的阶段
        1,@Retention(RetentionPolicy.RUNTIME):当前被描述的注解，会保留到class字节码文件中，并被JVM读取到
    3，@Documented：描述注解是否被抽取到api文档中
    4，@Inherited：描述注解是否被子类继承

在程序中使用（解析）注解：
